diff --git a/client.py b/client.py
index 40badcd..1782cfc 100644
--- a/client.py
+++ b/client.py
@@ -22,6 +22,7 @@ import urllib2
 import time
 import json
 import random
+import math
 
 # Server API URLs
 QUERY = "http://localhost:8080/query?id={}"
@@ -29,31 +30,38 @@ QUERY = "http://localhost:8080/query?id={}"
 # 500 server request
 N = 500
 
+
 def getDataPoint(quote):
-	""" Produce all of the needed values to generate a datapoint """
-	""" ------------- Update this function ------------- """
-	stock = quote['stock']
-	bid_price = float(quote['top_bid']['price'])
-	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
-	return stock, bid_price, ask_price, price
+    """ Produce all of the needed values to generate a datapoint """
+    stock = quote['stock']
+    bid_price = float(quote['top_bid']['price'])
+    ask_price = float(quote['top_ask']['price'])
+    # price as average of bid and ask prices
+    price = (bid_price + ask_price) / 2
+    return stock, bid_price, ask_price, round(price, 2)
+
 
 def getRatio(price_a, price_b):
-	""" Get ratio of price_a and price_b """
-	""" ------------- Update this function ------------- """
-	""" Also create some unit tests for this function in client_test.py """
-	return 1
+    """ Get ratio of price_a and price_b """
+    return round((float(price_a) / price_b), 2)  # Return the ratio in 2 decimal places
+
 
 # Main
 if __name__ == "__main__":
+    price_abc = 0
+    price_def = 0
 
-	# Query the price once every N seconds.
-	for _ in xrange(N):
-		quotes = json.loads(urllib2.urlopen(QUERY.format(random.random())).read())
-
-		""" ----------- Update to get the ratio --------------- """
-		for quote in quotes:
-			stock, bid_price, ask_price, price = getDataPoint(quote)
-			print "Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price)
+    # Query the price once every N seconds.
+    for _ in xrange(N):
+        quotes = json.loads(urllib2.urlopen(
+            QUERY.format(random.random())).read())
 
-		print "Ratio %s" % getRatio(price, price)
+        for quote in quotes:
+            stock, bid_price, ask_price, price = getDataPoint(quote)
+            print "Quoted %s at (bid:%s, ask:%s, price:%s)" % (
+                stock, bid_price, ask_price, price)
+            if stock == "ABC":
+                price_abc = price
+            else:
+                price_def = price
+        print "Ratio %s" % getRatio(price_abc, price_def)
diff --git a/client_test.py b/client_test.py
index a608a01..7535771 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,24 +1,41 @@
 import unittest
-from client import getDataPoint
+from client import getDataPoint, getRatio
+
 
 class ClientTest(unittest.TestCase):
-  def test_getDataPoint_calculatePrice(self):
-    quotes = [
-      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
 
-  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
-    quotes = [
-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
+    # Test for prices as average of bid and ask
+    def test_getDataPoint_calculatePrice(self):
+        quotes = [
+            {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+                'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        """ ------------ Assertions ------------ """
+        price_0 = round(
+            (getDataPoint(quotes[0])[1] + getDataPoint(quotes[0])[2]) / 2, 2)
+        price_1 = round(
+            (getDataPoint(quotes[1])[1] + getDataPoint(quotes[1])[2]) / 2, 2)
 
+        self.assertEqual(price_0, getDataPoint(quotes[0])[3])
+        self.assertEqual(price_1, getDataPoint(quotes[1])[3])
 
-  """ ------------ Add more unit tests ------------ """
+    # Test
+    def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+        quotes = [
+            {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453',
+                'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453',
+             'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        """ ------------ Assertions ------------ """
+        # Can not find a need for this test.
 
+    #  Test the get ratio function
+    def test_getRatio(self):
+        self.assertAlmostEqual(getRatio(34, 42), 0.81)
+        self.assertAlmostEqual(getRatio(119.21, 121.68), 0.98)
 
 
 if __name__ == '__main__':
